{"ast":null,"code":"var _jsxFileName = \"D:\\\\comment\\\\PAF_Y3S2-main\\\\react-frontend\\\\src\\\\components\\\\UpdateCommentComponent.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport CommentService from '../services/CommentService';\nimport { useParams, useNavigate } from 'react-router-dom';\nconst UpdateCommentComponent = () => {\n  const {\n    id,\n    commentId\n  } = useParams(); // Access the route parameters\n  const [commentText, setCommentText] = useState('');\n  const navigate = useNavigate();\n  useEffect(() => {\n    if (id && commentId) {\n      CommentService.getCommentById(id, commentId).then(response => {\n        setCommentText(response.data.comment);\n      }).catch(error => {\n        console.error('Error fetching comment:', error);\n      });\n    }\n  }, [id, commentId]);\n  const handleInputChange = event => {\n    setCommentText(event.target.value);\n  };\n  const updateComment = event => {\n    event.preventDefault();\n    CommentService.updateComment(id, commentId, {\n      comment: commentText\n    }).then(response => {\n      navigate(`/posts`); // Or navigate back to the post details\n    }).catch(error => {\n      console.error('Error updating comment:', error);\n    });\n  };\n  const cancel = () => {\n    navigate(`/posts`); // Or navigate back to the post details\n  };\n  if (!id || !commentId) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 12\n      }\n    }, \"Error: Post ID or Comment ID not found in the URL.\");\n  }\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, \"Edit Comment\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: updateComment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }\n  }, \"Comment:\"), /*#__PURE__*/React.createElement(\"textarea\", {\n    value: commentText,\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, \"Update\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: cancel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, \"Cancel\")));\n};\nexport default UpdateCommentComponent;","map":{"version":3,"names":["React","useState","useEffect","CommentService","useParams","useNavigate","UpdateCommentComponent","id","commentId","commentText","setCommentText","navigate","getCommentById","then","response","data","comment","catch","error","console","handleInputChange","event","target","value","updateComment","preventDefault","cancel","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","onChange","type","onClick"],"sources":["D:/comment/PAF_Y3S2-main/react-frontend/src/components/UpdateCommentComponent.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport CommentService from '../services/CommentService';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\n\r\nconst UpdateCommentComponent = () => {\r\n  const { id, commentId } = useParams(); // Access the route parameters\r\n  const [commentText, setCommentText] = useState('');\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    if (id && commentId) {\r\n      CommentService.getCommentById(id, commentId)\r\n        .then(response => {\r\n          setCommentText(response.data.comment);\r\n        })\r\n        .catch(error => {\r\n          console.error('Error fetching comment:', error);\r\n        });\r\n    }\r\n  }, [id, commentId]);\r\n\r\n  const handleInputChange = (event) => {\r\n    setCommentText(event.target.value);\r\n  };\r\n\r\n  const updateComment = (event) => {\r\n    event.preventDefault();\r\n    CommentService.updateComment(id, commentId, { comment: commentText })\r\n      .then(response => {\r\n        navigate(`/posts`); // Or navigate back to the post details\r\n      })\r\n      .catch(error => {\r\n        console.error('Error updating comment:', error);\r\n      });\r\n  };\r\n\r\n  const cancel = () => {\r\n    navigate(`/posts`); // Or navigate back to the post details\r\n  };\r\n\r\n  if (!id || !commentId) {\r\n    return <div>Error: Post ID or Comment ID not found in the URL.</div>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>Edit Comment</h2>\r\n      <form onSubmit={updateComment}>\r\n        <div>\r\n          <label>Comment:</label>\r\n          <textarea value={commentText} onChange={handleInputChange} />\r\n        </div>\r\n        <button type=\"submit\">Update</button>\r\n        <button onClick={cancel}>Cancel</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UpdateCommentComponent;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}